import requests
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

class BlockCraft:
    def __init__(self, api_key: str):
        self.api_url = 'https://api.etherscan.io/api'
        self.api_key = api_key

    def get_block_data(self, block_number: int) -> dict:
        """Fetches data for a specific Ethereum block."""
        url = f"{self.api_url}?module=proxy&action=eth_getBlockByNumber&tag={hex(block_number)}&boolean=true&apikey={self.api_key}"
        response = requests.get(url)
        return response.json().get('result', {})

    def get_transaction_data(self, tx_hash: str) -> dict:
        """Fetches data for a specific Ethereum transaction."""
        url = f"{self.api_url}?module=proxy&action=eth_getTransactionByHash&txhash={tx_hash}&apikey={self.api_key}"
        response = requests.get(url)
        return response.json().get('result', {})

    def get_historical_blocks(self, days: int) -> pd.DataFrame:
        """Fetches historical block data for the last specified number of days."""
        end_time = datetime.now()
        start_time = end_time - timedelta(days=days)
        url = f"{self.api_url}?module=block&action=getblocknobytime&timestamp={int(start_time.timestamp())}&closest=before&apikey={self.api_key}"
        start_block = int(requests.get(url).json().get('result', '0x0'), 16)
        
        url = f"{self.api_url}?module=block&action=getblocknobytime&timestamp={int(end_time.timestamp())}&closest=before&apikey={self.api_key}"
        end_block = int(requests.get(url).json().get('result', '0x0'), 16)
        
        block_data = []
        for block_number in range(start_block, end_block + 1):
            block = self.get_block_data(block_number)
            block_data.append({
                'timestamp': datetime.fromtimestamp(int(block.get('timestamp', '0x0'), 16)),
                'number': int(block.get('number', '0x0'), 16),
                'transactions': len(block.get('transactions', []))
            })
        
        df = pd.DataFrame(block_data)
        df.set_index('timestamp', inplace=True)
        return df

    def analyze_blockchain_metrics(self, block_number: int) -> dict:
        """Analyzes key metrics for a specific Ethereum block."""
        block = self.get_block_data(block_number)
        return {
            'block_number': block_number,
            'transaction_count': len(block.get('transactions', [])),
            'gas_used': int(block.get('gasUsed', '0x0'), 16),
            'gas_limit': int(block.get('gasLimit', '0x0'), 16)
        }

    def plot_block_trends(self, days: int):
        """Plots historical block trends for the Ethereum blockchain."""
        df = self.get_historical_blocks(days)
        if df.empty:
            print("No historical block data found.")
            return

        plt.figure(figsize=(12, 6))
        df['transactions'].plot()
        plt.title('Ethereum Block Transaction Count Trend')
        plt.xlabel('Date')
        plt.ylabel('Transaction Count')
        plt.grid(True)
        plt.show()

# Example Usage
if __name__ == "__main__":
    api_key = 'YOUR_ETHERSCAN_API_KEY'  # Replace with your Etherscan API key
    block_craft = BlockCraft(api_key)

    # Fetch and Display Block Metrics
    block_number = 12345678  # Replace with the block number you want to analyze
    block_metrics = block_craft.analyze_blockchain_metrics(block_number)
    print(f"Metrics for block {block_number}:")
    print(block_metrics)

    # Plot Historical Block Trends
    block_craft.plot_block_trends(days=30)  # Last 30 days
